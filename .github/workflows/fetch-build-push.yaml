name: Update and Build Workflow

on:
  workflow_dispatch:
  push:
    branches:
    - main

env:
  UPSTREAM_REPO: "excalidraw/excalidraw"
  IMAGE_NAME: "excalidraw"

jobs:
  check-releases:
    name: Check for new releases
    runs-on: ubuntu-latest

    steps:
    - name: Fetch latest release version
      id: upstream-release
      run: |
        upstream_release_tag=$(curl -sL https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest | jq -r ".tag_name")
        echo "upstream_release_tag=$upstream_release_tag" >> $GITHUB_OUTPUT

    - name: Fetch latest upstream release body
      id: upstream-release-body
      run: |
        echo 'upstream_release_body<<EOF' >> $GITHUB_OUTPUT
        curl -sL https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest | jq -r ".body" >> $GITHUB_OUTPUT
        echo EOF >> $GITHUB_OUTPUT

    - name: Fetch latest local release version
      id: local-release
      run: |
        local_release_tag=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r ".tag_name")
        echo "local_release_tag=$local_release_tag" >> $GITHUB_OUTPUT

    - name: Compare release versions
      if: steps.upstream-release.outputs.upstream_release_tag != steps.local-release.outputs.local_release_tag
      id: compare-releases
      run: |
        curl https://raw.githubusercontent.com/Ariel-Rodriguez/sh-semversion-2/main/semver2.sh -o /tmp/semver2.sh
        chmod +x /tmp/semver2.sh
        compare_result=$(/tmp/semver2.sh \
          ${{ steps.upstream-release.outputs.upstream_release_tag }} \
          ${{ steps.local-release.outputs.local_release_tag }})
        echo "compare_result=$compare_result" >> $GITHUB_OUTPUT

    outputs:
      newReleaseFound: ${{ steps.compare-releases.outputs.compare_result }}
      upstreamReleaseTag: ${{ steps.upstream-release.outputs.upstream_release_tag }}
      upstreamReleaseBody: ${{ steps.upstream-release-body.outputs.upstream_release_body }}

  sync-upstream:
    needs: [check-releases]
    name: Sync fork with upstream
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: src
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: git-filter-repo
        version: 1.0

    - name: Sync upstream changes
      run: |
        git remote add upstream https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.UPSTREAM_REPO }}
        git pull upstream refs/tags/${{ needs.check-releases.outputs.upstreamReleaseTag }} --rebase
        git push --set-upstream origin src --force

  push-image:
    needs: [check-releases, sync-upstream]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        ref: src

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to ghcr
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME}}:${{ needs.check-releases.outputs.upstreamReleaseTag }}

  create-release:
    needs: [check-releases, sync-upstream, push-image]
    if: needs.check-releases.outputs.newReleaseFound
    name: Create a new release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Create a new release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.check-releases.outputs.upstreamReleaseTag }}
        body: ${{ needs.check-releases.outputs.upstreamReleaseBody }}
